import { findContentById } from '@src/core/utils/finder'
import _ from 'lodash'
import { baseStatsObject, getPlungeScaling, StatsObject } from '../../baseConstant'
import { Element, ITalentLevel, Stats, TalentProperty, WeaponType } from '@src/domain/constant'

import { toPercentage } from '@src/core/utils/converter'
import { IContent, ITalent } from '@src/domain/conditional'
import { calcScaling } from '@src/core/utils/data_format'

const TravelerElectric = (c: number, a: number, t: ITalentLevel) => {
  const upgrade = {
    normal: false,
    skill: c >= 3,
    burst: c >= 5,
  }
  const normal = t.normal + (upgrade.normal ? 3 : 0)
  const skill = t.skill + (upgrade.skill ? 3 : 0)
  const burst = t.burst + (upgrade.burst ? 3 : 0)

  const talents: ITalent = {
    normal: {
      title: `Foreign Thundershock`,
      content: `<b>Normal Attack</b>
      <br />Performs up to 5 rapid strikes.
      <br />
      <br /><b>Charged Attack</b>
      <br />Consumes a certain amount of Stamina to unleash 2 rapid sword strikes.
      <br />
      <br /><b>Plunging Attack</b>
      <br />Plunges from mid-air to strike the ground below, damaging opponents along the path and dealing AoE DMG upon impact.
      `,
    },
    skill: {
      title: `Lightning Blade`,
      content: `Unleashes three swift thunder shadows that deal <b class="text-genshin-electro">Electro DMG</b> to opponents and leave an Abundance Amulet behind after hitting an opponent.
      <br /><span class="text-desc">2</span> Abundance Amulets can be created initially. Using this skill will reset any Abundance Amulets that were generated.
      <br />
      <br /><b>Abundance Amulets</b>
      <br />When a character is near an Abundance Amulet, they will absorb it and obtain the following effects:
      <br />- Restores Elemental Energy
      <br />- Increases Energy Recharge during the Abundance Amulet's duration.
      `,
    },
    burst: {
      title: `Bellowing Thunder	`,
      content: `You call upon the protection of lightning, knocking nearby opponents back and dealing <b class="text-genshin-electro">Electro DMG</b> to them.
      <br />
      <br /><b>Lightning Shroud</b>
      <br />When your active character's Normal or Charged Attacks hit opponents, they will call Falling Thunder forth, dealing <b class="text-genshin-electro">Electro DMG</b>.
      <br />When Falling Thunder hits opponents, it will regenerate Energy for that character.
      <br />One instance of Falling Thunder can be generated every <span class="text-desc">0.5</span>s.`,
    },
    a1: {
      title: `A1: Thunderflash`,
      content: `When another nearby character in the party obtains an Abundance Amulet created by Lightning Blade, Lightning Blade's CD is decreased by <span class="text-desc">1.5</span>s.`,
    },
    a4: {
      title: `A4: Resounding Roar`,
      content: `Increases the Energy Recharge effect granted by Lightning Blade's Abundance Amulet by <span class="text-desc">10%</span> of the Traveler's Energy Recharge.`,
    },
    c1: {
      title: `C1: Spring Thunder of Fertility`,
      content: `The number of Abundance Amulets that can be generated using Lightning Blade is increased to <span class="text-desc">3</span>.`,
    },
    c2: {
      title: `C2: Violet Vehemence`,
      content: `When Falling Thunder created by Bellowing Thunder hits an opponent, it will decrease their <b class="text-genshin-electro">Electro RES</b> by <span class="text-desc">15%</span> for <span class="text-desc">8</span>s.
      `,
    },
    c3: {
      title: `C3: Distant Crackling`,
      content: `Increases the Level of Bellowing Thunder by <span class="text-desc">3</span>.
      <br />Maximum upgrade level is <span class="text-desc">15</span>.`,
    },
    c4: {
      title: `C4: Fickle Cloudstrike`,
      content: `When a character obtains Abundance Amulets generated by Lightning Blade, if this character's Energy is less than <span class="text-desc">35%</span>, the Energy restored by the Abundance Amulets is increased by <span class="text-desc">100%</span>.`,
    },
    c5: {
      title: `C5: Clamor in the Wilds`,
      content: `Increases the Level of Lightning Blade by <span class="text-desc">3</span>.
      <br />Maximum upgrade level is <span class="text-desc">15</span>.`,
    },
    c6: {
      title: `C6: World-Shaker`,
      content: `Every <span class="text-desc">2</span> Falling Thunder attacks triggered by Bellowing Thunder will significantly increase the DMG dealt by the next Falling Thunder, dealing <span class="text-desc">200%</span> of its original DMG, and will restore an additional <span class="text-desc">1</span> Energy to the current character.`,
    },
  }

  const content: IContent[] = [
    {
      type: 'toggle',
      id: 'amulet',
      text: `Abundance Amulet Absorption`,
      ...talents.skill,
      show: true,
      default: true,
    },
    {
      type: 'toggle',
      id: 'emc_c2',
      text: `C2 Electro RES Shred`,
      ...talents.c2,
      show: c >= 2,
      default: true,
      debuff: true,
    },
  ]

  const teammateContent: IContent[] = [findContentById(content, 'amulet'), findContentById(content, 'emc_c2')]

  return {
    upgrade,
    talents,
    content,
    teammateContent,
    allyContent: [],
    preCompute: (x: StatsObject, form: Record<string, any>) => {
      const base = _.cloneDeep(x)

      base.BASIC_SCALING = [
        {
          name: '1-Hit',
          value: [{ scaling: calcScaling(0.445, normal, 'physical', '1'), multiplier: Stats.ATK }],
          element: Element.PHYSICAL,
          property: TalentProperty.NA,
        },
        {
          name: '2-Hit',
          value: [{ scaling: calcScaling(0.434, normal, 'physical', '1'), multiplier: Stats.ATK }],
          element: Element.PHYSICAL,
          property: TalentProperty.NA,
        },
        {
          name: '3-Hit',
          value: [{ scaling: calcScaling(0.53, normal, 'physical', '1'), multiplier: Stats.ATK }],
          element: Element.PHYSICAL,
          property: TalentProperty.NA,
        },
        {
          name: '4-Hit',
          value: [{ scaling: calcScaling(0.583, normal, 'physical', '1'), multiplier: Stats.ATK }],
          element: Element.PHYSICAL,
          property: TalentProperty.NA,
        },
        {
          name: '5-Hit',
          value: [{ scaling: calcScaling(0.708, normal, 'physical', '1'), multiplier: Stats.ATK }],
          element: Element.PHYSICAL,
          property: TalentProperty.NA,
        },
      ]
      base.CHARGE_SCALING = [
        {
          name: 'Charged Attack DMG [1]',
          value: [{ scaling: calcScaling(0.559, normal, 'physical', '1'), multiplier: Stats.ATK }],
          element: Element.PHYSICAL,
          property: TalentProperty.CA,
        },
        {
          name: 'Charged Attack DMG [2]',
          value: [{ scaling: calcScaling(0.607, normal, 'physical', '1'), multiplier: Stats.ATK }],
          element: Element.PHYSICAL,
          property: TalentProperty.CA,
        },
      ]
      base.PLUNGE_SCALING = getPlungeScaling('base', normal)
      base.SKILL_SCALING = [
        {
          name: 'Skill DMG',
          value: [{ scaling: calcScaling(0.7866, skill, 'elemental', '1'), multiplier: Stats.ATK }],
          element: Element.ELECTRO,
          property: TalentProperty.SKILL,
        },
      ]
      base.BURST_SCALING = [
        {
          name: 'Skill DMG',
          value: [{ scaling: calcScaling(1.144, burst, 'elemental', '1'), multiplier: Stats.ATK }],
          element: Element.ELECTRO,
          property: TalentProperty.BURST,
        },
        {
          name: 'Falling Thunder DMG',
          value: [{ scaling: calcScaling(0.328, burst, 'elemental', '1'), multiplier: Stats.ATK }],
          element: Element.ELECTRO,
          property: TalentProperty.BURST,
        },
      ]

      if (form.dmc_a6) base[Stats.DENDRO_DMG] += 0.12
      if (form.emc_c2) base.ELECTRO_RES_PEN += 0.15

      if (c >= 6)
        base.BURST_SCALING.push({
          name: 'Third Falling Thunder DMG',
          value: [{ scaling: calcScaling(0.328, burst, 'elemental', '1') * 2, multiplier: Stats.ATK }],
          element: Element.ELECTRO,
          property: TalentProperty.BURST,
        })

      return base
    },
    preComputeShared: (own: StatsObject, base: StatsObject, form: Record<string, any>) => {
      if (form.amulet) base[Stats.ER] += 0.2 + (a >= 4 ? own[Stats.ER] * 0.1 : 0)
      if (form.emc_c2) base.ELECTRO_RES_PEN += 0.15

      return base
    },
    postCompute: (base: StatsObject, form: Record<string, any>) => {
      if (form.amulet) base[Stats.ER] += 0.2 + (a >= 4 ? base[Stats.ER] * 0.1 : 0)

      return base
    },
  }
}

export default TravelerElectric
